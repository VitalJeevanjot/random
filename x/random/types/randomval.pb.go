// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: random/randomval.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Randomval struct {
	Index     string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Creator   string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Vrv       string `protobuf:"bytes,3,opt,name=vrv,proto3" json:"vrv,omitempty"`
	Outcap    string `protobuf:"bytes,4,opt,name=outcap,proto3" json:"outcap,omitempty"`
	Proof     string `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
	Pubk      string `protobuf:"bytes,6,opt,name=pubk,proto3" json:"pubk,omitempty"`
	Message   string `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	Parsedvrv int64  `protobuf:"varint,8,opt,name=parsedvrv,proto3" json:"parsedvrv,omitempty"`
	Finalvrv  int64  `protobuf:"varint,9,opt,name=finalvrv,proto3" json:"finalvrv,omitempty"`
}

func (m *Randomval) Reset()         { *m = Randomval{} }
func (m *Randomval) String() string { return proto.CompactTextString(m) }
func (*Randomval) ProtoMessage()    {}
func (*Randomval) Descriptor() ([]byte, []int) {
	return fileDescriptor_47acd85569ce3b35, []int{0}
}
func (m *Randomval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Randomval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Randomval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Randomval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Randomval.Merge(m, src)
}
func (m *Randomval) XXX_Size() int {
	return m.Size()
}
func (m *Randomval) XXX_DiscardUnknown() {
	xxx_messageInfo_Randomval.DiscardUnknown(m)
}

var xxx_messageInfo_Randomval proto.InternalMessageInfo

func (m *Randomval) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Randomval) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Randomval) GetVrv() string {
	if m != nil {
		return m.Vrv
	}
	return ""
}

func (m *Randomval) GetOutcap() string {
	if m != nil {
		return m.Outcap
	}
	return ""
}

func (m *Randomval) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

func (m *Randomval) GetPubk() string {
	if m != nil {
		return m.Pubk
	}
	return ""
}

func (m *Randomval) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Randomval) GetParsedvrv() int64 {
	if m != nil {
		return m.Parsedvrv
	}
	return 0
}

func (m *Randomval) GetFinalvrv() int64 {
	if m != nil {
		return m.Finalvrv
	}
	return 0
}

func init() {
	proto.RegisterType((*Randomval)(nil), "genievot.random.random.Randomval")
}

func init() { proto.RegisterFile("random/randomval.proto", fileDescriptor_47acd85569ce3b35) }

var fileDescriptor_47acd85569ce3b35 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xb1, 0x6e, 0xb3, 0x30,
	0x14, 0x85, 0xf1, 0x4f, 0x42, 0x82, 0xa7, 0x5f, 0x57, 0x15, 0xb2, 0xaa, 0xca, 0x8a, 0x3a, 0xa5,
	0x0b, 0x0c, 0x7d, 0x83, 0xf6, 0x0d, 0x18, 0xbb, 0x19, 0x70, 0x28, 0x6a, 0xe0, 0x5a, 0xc6, 0xa0,
	0xf4, 0x2d, 0xfa, 0x58, 0x1d, 0x33, 0x76, 0xac, 0xe0, 0x45, 0x2a, 0xdb, 0xd0, 0x4e, 0x3e, 0xdf,
	0x39, 0xd6, 0x3d, 0xd2, 0xa1, 0x89, 0x16, 0x5d, 0x85, 0x6d, 0xe6, 0x9f, 0x51, 0x9c, 0x53, 0xa5,
	0xd1, 0x20, 0x24, 0xb5, 0xec, 0x1a, 0x39, 0xa2, 0x49, 0x7d, 0xb2, 0x3c, 0xf7, 0x33, 0xa1, 0x71,
	0xbe, 0xfe, 0x85, 0x1b, 0xba, 0x6d, 0xba, 0x4a, 0x5e, 0x18, 0x39, 0x90, 0x63, 0x9c, 0x7b, 0x00,
	0x46, 0x77, 0xa5, 0x96, 0xc2, 0xa0, 0x66, 0xff, 0x9c, 0xbf, 0x22, 0xfc, 0xa7, 0xe1, 0xa8, 0x47,
	0x16, 0x3a, 0xd7, 0x4a, 0x48, 0x68, 0x84, 0x83, 0x29, 0x85, 0x62, 0x1b, 0x67, 0x2e, 0x64, 0x2f,
	0x2b, 0x8d, 0x78, 0x62, 0x5b, 0x7f, 0xd9, 0x01, 0x00, 0xdd, 0xa8, 0xa1, 0x78, 0x63, 0x91, 0x33,
	0x9d, 0xb6, 0x6d, 0xad, 0xec, 0x7b, 0x51, 0x4b, 0xb6, 0xf3, 0x6d, 0x0b, 0xc2, 0x1d, 0x8d, 0x95,
	0xd0, 0xbd, 0xac, 0x6c, 0xe7, 0xfe, 0x40, 0x8e, 0x61, 0xfe, 0x67, 0xc0, 0x2d, 0xdd, 0x9f, 0x9a,
	0x4e, 0x9c, 0x6d, 0x18, 0xbb, 0xf0, 0x97, 0x9f, 0x9e, 0x3f, 0x27, 0x4e, 0xae, 0x13, 0x27, 0xdf,
	0x13, 0x27, 0x1f, 0x33, 0x0f, 0xae, 0x33, 0x0f, 0xbe, 0x66, 0x1e, 0xbc, 0x3c, 0xd4, 0x8d, 0x79,
	0x1d, 0x8a, 0xb4, 0xc4, 0x36, 0x5b, 0x27, 0x5a, 0xc6, 0xcb, 0x2e, 0xab, 0x30, 0xef, 0x4a, 0xf6,
	0x45, 0xe4, 0x96, 0x7c, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x73, 0x88, 0xfa, 0x63, 0x01,
	0x00, 0x00,
}

func (m *Randomval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Randomval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Randomval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Finalvrv != 0 {
		i = encodeVarintRandomval(dAtA, i, uint64(m.Finalvrv))
		i--
		dAtA[i] = 0x48
	}
	if m.Parsedvrv != 0 {
		i = encodeVarintRandomval(dAtA, i, uint64(m.Parsedvrv))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintRandomval(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Pubk) > 0 {
		i -= len(m.Pubk)
		copy(dAtA[i:], m.Pubk)
		i = encodeVarintRandomval(dAtA, i, uint64(len(m.Pubk)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintRandomval(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Outcap) > 0 {
		i -= len(m.Outcap)
		copy(dAtA[i:], m.Outcap)
		i = encodeVarintRandomval(dAtA, i, uint64(len(m.Outcap)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Vrv) > 0 {
		i -= len(m.Vrv)
		copy(dAtA[i:], m.Vrv)
		i = encodeVarintRandomval(dAtA, i, uint64(len(m.Vrv)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintRandomval(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintRandomval(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRandomval(dAtA []byte, offset int, v uint64) int {
	offset -= sovRandomval(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Randomval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovRandomval(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovRandomval(uint64(l))
	}
	l = len(m.Vrv)
	if l > 0 {
		n += 1 + l + sovRandomval(uint64(l))
	}
	l = len(m.Outcap)
	if l > 0 {
		n += 1 + l + sovRandomval(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovRandomval(uint64(l))
	}
	l = len(m.Pubk)
	if l > 0 {
		n += 1 + l + sovRandomval(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovRandomval(uint64(l))
	}
	if m.Parsedvrv != 0 {
		n += 1 + sovRandomval(uint64(m.Parsedvrv))
	}
	if m.Finalvrv != 0 {
		n += 1 + sovRandomval(uint64(m.Finalvrv))
	}
	return n
}

func sovRandomval(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRandomval(x uint64) (n int) {
	return sovRandomval(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Randomval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomval
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Randomval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Randomval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomval
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomval
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomval
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomval
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomval
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomval
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vrv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomval
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomval
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomval
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vrv = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outcap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomval
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomval
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomval
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outcap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomval
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomval
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomval
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomval
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomval
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomval
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomval
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomval
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomval
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parsedvrv", wireType)
			}
			m.Parsedvrv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomval
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parsedvrv |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalvrv", wireType)
			}
			m.Finalvrv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomval
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Finalvrv |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRandomval(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRandomval
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRandomval(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRandomval
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRandomval
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRandomval
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRandomval
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRandomval
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRandomval
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRandomval        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRandomval          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRandomval = fmt.Errorf("proto: unexpected end of group")
)
